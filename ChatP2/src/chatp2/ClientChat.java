package chatp2;


import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class ClientChat extends javax.swing.JFrame {

    //Socket usado para a ligação
    private Socket socket;
    //Streams de leitura e escrita. A de leitura é usada para receber os dados do
    //servidor, enviados pelos outros clientes. A de escrita para enviar os dados
    //para o servidor.
    private DataInputStream dadosEntrada;
    private DataOutputStream dadosSaida;
    //apenas para que o utilizador não altere o nick a meio da conversa
    private String nick;

    /**
     * Creates new form ClientChat
     */
    public ClientChat() {
        initComponents();
    }

    public void ligar() {
        try {
            nick = campo_nick.getText().trim();
            tela_Msgs.append("System: Conectando...\n");
            String host = campoIP.getText().trim();
            int port = 12345;

            //criar o socket
            socket = new Socket(host, port);
            //como não ocorreu uma excepção temos um socket aberto
            tela_Msgs.append("System: Conectado...\n");

            //Vamos obter as streams de comunicação fornecidas pelo socket
            dadosEntrada = new DataInputStream(socket.getInputStream());
            dadosSaida = new DataOutputStream(socket.getOutputStream());

            //e iniciar a thread que vai estar constantemente à espera de novas
            //mensages. Se não usassemos uma thread, não conseguiamos receber
            //mensagens enquanto estivessemos a escrever e toda a parte gráfica
            //ficaria bloqueada.
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        while (true) {
                            //sequencialmente, ler as mensagens uma a uma e acrescentar ao
                            //texto que já recebemos
                            //para o utilizador ver

                            
                            String encrStr = dadosEntrada.readUTF();
                            int keyDecr = encrStr.length();
                            
                            String decripteStr = CipherCesar.decriptar(keyDecr, encrStr);
                            tela_Msgs.append(decripteStr + "\n");

                            //System.out.println("recebido da thread" + dadosEntrada.readUTF());
                        }
                    } catch (IOException ex) {
                        tela_Msgs.append("<-cliente->: " + ex.getMessage());
                    } catch (Exception ex) {
                        Logger.getLogger(ClientChat.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } //estamos a usar uma classe anónima...
            }).start();

        } catch (IOException ex) {
            tela_Msgs.append("<-cliente->: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpMensagens = new javax.swing.JPanel();
        jscpScrollMensagens = new javax.swing.JScrollPane();
        tela_Msgs = new javax.swing.JTextArea();
        Campo_escreverMsg = new javax.swing.JTextField();
        campo_nick = new javax.swing.JTextField();
        jlblNick = new javax.swing.JLabel();
        jlblEndereco = new javax.swing.JLabel();
        campoIP = new javax.swing.JTextField();
        btn_Logar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpMensagens.setBorder(javax.swing.BorderFactory.createTitledBorder("Mensagens"));

        tela_Msgs.setColumns(20);
        tela_Msgs.setRows(5);
        jscpScrollMensagens.setViewportView(tela_Msgs);

        org.jdesktop.layout.GroupLayout jpMensagensLayout = new org.jdesktop.layout.GroupLayout(jpMensagens);
        jpMensagens.setLayout(jpMensagensLayout);
        jpMensagensLayout.setHorizontalGroup(
            jpMensagensLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jscpScrollMensagens)
        );
        jpMensagensLayout.setVerticalGroup(
            jpMensagensLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jscpScrollMensagens, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
        );

        Campo_escreverMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Campo_escreverMsgActionPerformed(evt);
            }
        });

        campo_nick.setText("User");

        jlblNick.setText("Nick:");

        jlblEndereco.setText("IP: ");

        campoIP.setText("192.168.43.37");

        btn_Logar.setText("Logar");
        btn_Logar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_LogarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Campo_escreverMsg)
                    .add(jpMensagens, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jlblNick)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(campo_nick, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jlblEndereco, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(campoIP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btn_Logar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jpMensagens, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(campo_nick, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblNick)
                    .add(jlblEndereco)
                    .add(campoIP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btn_Logar))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Campo_escreverMsg, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void Campo_escreverMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Campo_escreverMsgActionPerformed
        try {
            //enviar a mensagem para o servidor.
            //anexamos o nickname deste utilizador apenas para identificação
            String msgatual = "< " + nick + " >_" + getDateTime() + "_ Diz: " + Campo_escreverMsg.getText().trim();

            int keyEncr = msgatual.length();
            String msgatualCripta = CipherCesar.encriptar(keyEncr, msgatual);
            System.out.println(" msg saiu para entrega1: " + msgatual + " " + getDateTime());
            System.out.println(" msg saiu para entrega1: " + msgatualCripta + " " + getDateTime());
            dadosSaida.writeUTF(msgatualCripta);
            Campo_escreverMsg.setText("");

        } catch (IOException ex) {
            tela_Msgs.append("System: " + ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(ClientChat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Campo_escreverMsgActionPerformed

    private void btn_LogarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_LogarActionPerformed
        if (campo_nick.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nick não pode ser vazio.", "Nick vazio...", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (campoIP.getText().trim().isEmpty()) {
            campoIP.setText("localhost");
        }
        ligar();
    }//GEN-LAST:event_btn_LogarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (socket != null) {
            try {
                socket.close();
                System.out.println("Socket fechado" + getDateTime());

            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     *
     */
    public String getDateTime() {
        DateFormat dateFormat = new SimpleDateFormat("hh:mm:ss:mmm");
        Date date = new Date();
        String data = dateFormat.format(date);
        return data;
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ClientChat().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Campo_escreverMsg;
    private javax.swing.JButton btn_Logar;
    private javax.swing.JTextField campoIP;
    private javax.swing.JTextField campo_nick;
    private javax.swing.JLabel jlblEndereco;
    private javax.swing.JLabel jlblNick;
    private javax.swing.JPanel jpMensagens;
    private javax.swing.JScrollPane jscpScrollMensagens;
    private javax.swing.JTextArea tela_Msgs;
    // End of variables declaration//GEN-END:variables

}
